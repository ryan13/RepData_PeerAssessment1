classes <- selectClass(ColonData, "MSIstatus", "binary")
theScores <- zScores(esets, classes, useREM = FALSE)
round(theScores[1:2, ],3)
ScoresFDR1000 <- zScoreFDR(esets, classes, useREM = FALSE, nperm = 1000, CombineExp = 1:3)
names(ScoresFDR)
plotES(theScores, ScoresFDR1000, num.studies=3, legend.names=c("Combined set","Dataset1", "Dataset2", "Dataset3"), colors=c("red","blue","green","magenta"), which=3)
es2
es2<-ES.GeneMeta(ColonData, "MSIstatus", nperm = 1000)
es2
summary(es2)
rm(list=ls(all=TRUE))
options(width=60)
library(MAMA)
data(ColonData)
plot ColonData
#data preparation
esets <- GEDM(ColonData)
classes <- selectClass(ColonData, "MSIstatus", "factor")
pvalt<-pvalcombination(esets, classes, moderated = "t" , BHth = 0.05)
# using wrapper function
pval<- metaMA(ColonData, "MSIstatus", which ="pval")
# effect sizes
# Implementation from metaMA package
esets <- GEDM(ColonData)
classes <- selectClass(ColonData, "MSIstatus", "factor")
ESt<-EScombination(esets, classes, moderated = "t" , BHth = 0.05)
#ESt<-EScombination(esets, classes, moderated = "t" , BHth = 0.01)
# wrap function
es <- metaMA(ColonData, "MSIstatus", which = "ES")
#using GeneMeta
es2<-ES.GeneMeta(ColonData, "MSIstatus", nperm = 1000)
ph1<-clinical(ColonData)[[1]][,1]
levels(ph1) <- c(1, 0)
clinical(ColonData)[[1]][,1]
ph2<-clinical(ColonData)[[2]][,1]
levels(ph2) <- c(1, 0)
ph3<-clinical(ColonData)[[3]][,2]
levels(ph3) <- c(1, 0)
d.den <- getdF(GEDM(ColonData)[[1]], ph1)
d.adj.den <- dstar(d.den, length(ph1))
var.d.adj.den <- sigmad(d.adj.den, sum(ph1 == 0), sum(ph1 == 1))
head(d.adj.den)
d.aus <- getdF(GEDM(ColonData)[[2]], ph2)
d.adj.aus <- dstar(d.aus, length(ph2))
var.d.adj.aus <- sigmad(d.adj.aus, sum(ph2 == 0), sum(ph2 == 1))
d.jap <- getdF(GEDM(ColonData)[[3]], ph3)
d.adj.jap <- dstar(d.jap, length(ph3))
var.d.adj.jap <- sigmad(d.adj.jap, sum(ph3 == 0), sum(ph3 == 1))
mymns <- cbind(d.adj.den, d.adj.aus,d.adj.jap)
myvars <- cbind(var.d.adj.den, var.d.adj.aus,var.d.adj.jap)
my.Q <- f.Q(mymns, myvars)
#FEM
muFEM = mu.tau2(mymns, myvars)
sdFEM = var.tau2(myvars)
ZFEM = muFEM/sqrt(sdFEM)
qqnorm(ZFEM, pch = "*")
qqline(ZFEM, col = "red")
#REM
num.studies <- 3
my.tau2.DL <- tau2.DL(my.Q, num.studies, my.weights=1/myvars)
myvarsDL <- myvars + my.tau2.DL
muREM <- mu.tau2(mymns, myvarsDL)
varREM <- var.tau2(myvarsDL)
ZREM <- muREM/sqrt(varREM)
# Find Zscore
esets <- GEDM(ColonData)
classes <- selectClass(ColonData, "MSIstatus", "binary")
theScores <- zScores(esets, classes, useREM = FALSE)
round(theScores[1:2, ],3)
ScoresFDR <- zScoreFDR(esets, classes, useREM = FALSE, nperm = 50, CombineExp = 1:3)
ScoresFDR1000 <- zScoreFDR(esets, classes, useREM = FALSE, nperm = 1000, CombineExp = 1:3)
names(ScoresFDR)
plotES(theScores, ScoresFDR1000, num.studies=3, legend.names=c("Combined set","Dataset1", "Dataset2", "Dataset3"), colors=c("red","blue","green","magenta"), which=3)
# wrapper function from GeneMeta
es2<-ES.GeneMeta(ColonData, "MSIstatus", nperm = 1000)
#Similarity of Order gene list (SOGL)
plotES(es2$theScores, es2$ScoresFDR, num.studies=3, legend.names=c("Combined set","Dataset1", "Dataset2", "Dataset3"), colors=c("red","blue","green","magenta"), which=2)
plotES(es2$theScores, es24ScoresFDR, num.studies=3, legend.names=c("Combined set","Dataset1", "Dataset2", "Dataset3"), colors=c("red","blue","green","magenta"), which=3)
plotES(theScores, ScoresFDR1000, num.studies=3, legend.names=c("Meta-analysis","Dataset1", "Dataset2", "Dataset3"), colors=c("red","blue","green","magenta"), which=3)
plotES(theScores, ScoresFDR1000, num.studies=3, legend.names=c("Meta-analysis","Dataset1", "Dataset2", "Dataset3"), colors=c("red","blue","green","magenta"), which=2)
plotES(theScores, ScoresFDR1000, num.studies=3, legend.names=c("Meta-analysis","Dataset1", "Dataset2", "Dataset3"), colors=c("red","blue","green","magenta"), which=3)
install.packages("rJava")
# Differences between Arithmatic, Harmonic, and Geometric Means
library(ggplot2)
library(reshape2)
# Function to calculate the harmonic mean
harmonicMean &lt;- function(array){
if(!is.numeric(array)){
stop(&quot;Passed argument must be an array. Consider using sapply for data frames.&quot;)
}
if(any(array&lt;0)){
stop(&quot;All values must be greater than zero.&quot;)
}
length (array) / sum(1 / array)
}
# Function to calculate the geometric mean
geometricMean &lt;- function(array){
if(!is.numeric(array)){
stop(&quot;Passed argument must be an array. Consider using sapply for data frames.&quot;)
}
if(any(array&lt;0)){
stop(&quot;All values must be greater than zero. If you are attempting to
apply this function to rates, convert to +1 format. For example,
5% becomes 1.05 and -20% becomes .8.&quot;)
}
prod(array)^(1/length(array))
}
# Function to capture the three means based on the sample
fetchMeans &lt;- function(sample){
#Passed data frame with n number of rows and 2 columns (values and obs)
arithmetic &lt;- mean(sample$value)
harmonic &lt;- harmonicMean(sample$value)
geometric &lt;- geometricMean(sample$value)
results &lt;- data.frame(arithmetic, harmonic, geometric)
return(results)
}
##### Graphs #####
# Color Scheme
ealred &lt;- &quot;#7D110C&quot;
ealtan &lt;- &quot;#CDC4B6&quot;
eallighttan &lt;- &quot;#F7F6F0&quot;
ealdark &lt;- &quot;#423C30&quot;
ealorange &lt;- &quot;#BB681C&quot;
ealgreen &lt;- &quot;#3e4525&quot;
ealblue &lt;- &quot;#25516d&quot;
# Function that plots the three means for comparison, called below
plot.means &lt;- function(sample) {
# First calculate the various means and then flatten to a data frame that
# can be plotted with ggplot2
results &lt;- fetchMeans(sample)
results.melted &lt;- melt(results, variable.name=&quot;Type&quot;, value.name=&quot;Mean&quot;)
g &lt;- ggplot(sample, aes(x=obs, y=value)) + geom_bar(stat=&quot;identity&quot;, alpha=1, fill=ealtan) +
geom_hline(data=results.melted, aes(yintercept=Mean, color=Type), show_guide=TRUE, size=1) +
scale_color_manual(name=&quot;Type of Mean&quot;,
values=c(ealred, ealorange, ealblue),
breaks=c(&quot;arithmetic&quot;, &quot;harmonic&quot;, &quot;geometric&quot;),
labels=c(paste(&quot;Arithmetic: &quot;, round(results$arithmetic, digits=2)),
paste(&quot;Harmonic: &quot;, round(results$harmonic, digits=2)),
paste(&quot;Geometric: &quot;, round(results$geometric, digits=2)))) +
scale_x_discrete(breaks=NULL) +
labs(x=&quot;Observations&quot;, y=NULL) +
theme(panel.background=element_rect(fill=eallighttan))
return(g)
}
#### Comparison with Normally Distributed Sample ####
# First generate 'random' set of n numbers with mean of m. These will be normally
# distributed so you expect arithmetic mean, harmonic mean, and geometric
# mean to be fairly consistent.
n &lt;- 25
m &lt;- 5
sample &lt;- data.frame(&quot;value&quot;=rnorm(n=n, mean=m))
sample$obs &lt;- rownames(sample)
# Next plot the three means, compared with the sample population
g &lt;- plot.means(sample)
g &lt;- g + ggtitle(&quot;Mean Comparison with\nNormally Distributed Sample&quot;)
g
# ggsave(&quot;test.png&quot;)
#### Comparison based on Sample with an Outlier
# Add a few outliers to distort the population
sample.outliers &lt;- sample
sample.outliers[n-2, 1] &lt;- m^2.5
g.outlier &lt;- plot.means(sample.outliers)
g.outlier &lt;- g.outlier + ggtitle(&quot;Mean Comparison using\nSample with Outliers&quot;)
g.outlier
library(ggplot2)
library(reshape2)
install.packages(ggplot2)
install.packages("ggplot2")
d <-  sample(1:40, 6, replace=F)
d
geometricMean(d)
install.packacge("lattice")
install.packacges("lattice")
install.packages("lattice")
library(moments)
install.packages("moments")
quit()
install.packagees("skewness")
install.packages("moments")
install.packages("moments",lib="c:/r-with")
install.packages("ggplot2",lib="c:/r-with")
install.packages("lattice",lib="c:/r-with")
library(moments)
library(lattice)
ds = read.csv("http://www.math.smith.edu/r/data/help.csv")
ds$gender = ifelse(ds$female==1, "female", "male")
densityplot(~ cesd, data=ds, groups=gender, auto.key=TRUE)
with(ds, tapply(cesd, gender, skewness))
install.packages("moments",lib="c:/r-with")
library(moments)
library("moments",lib='c:/r-with')
with(ds, tapply(cesd, gender, skewness))
data <- read.table("2401.dat", header=T)
> attach(data)
data <- read.table("2401.dat", header=T)
attach(data)
attach(data)
data <- read.table("2401.dat", header=T)
skessness(ds)
skewness(ds)
ds
skewness()
skewness ?
)
? skewness
skewness(ds$male, na.rm = FALSE)
set.seed(1234)
skewness(rnorm(1000))
class(ds)
sapply(ds,class)
head(ds)
x <- c(0:10, 50)
xm <- mean(x)
xm
c(xm, mean(x, trim = 0.10))
x
library(dataset)
library(datasets)
data(women)
mad(women$height)
install.packages("cca",lib="c:/r-with")
install.packages("CCA",lib="c:/r-with")
install.packages("GGally",lib="c:/r-with")
q()
attached <- search()
attached[!grepl("package", attached)]
attach(iris)
iris
?sweep
require(stats)
med.att <- apply(attitude, 2, median)
med.att
stats
sweep(data.matrix(attitude), 2, med.att)
A <- array(1:24, dim = 4:2)
A
dim(A)
A[1]
A[2]
A[3]
A[4]
sweep(A, 1, 5)
# We will use the built-in iris data set.
# We will consider the entire data set (all three species)
attach(iris)
# We will standardize the variables first
# by dividing by each column's standard deviation:
# (we will remove column 5, the species labels)
iris.std <- sweep(iris[,-5], 2, sqrt(apply(iris[,-5],2,var)), FUN="/")
sepal.meas <- iris.std[,1:2]
petal.meas <- iris.std[,3:4]
### Doing the CCA the long way:
# Finding blocks of the correlation matrix:
R11 <- cor(sepal.meas)
R22 <- cor(petal.meas)
R12 <- c(cor(sepal.meas[,1], petal.meas[,1]), cor(sepal.meas[,1], petal.meas[,2]),
cor(sepal.meas[,2], petal.meas[,1]), cor(sepal.meas[,2], petal.meas[,2]))
R12 <- matrix(R12, ncol=ncol(R22), byrow=T) # R12 has q2 columns, same as number of petal measurements
R21 <- t(R12)  # R21=transpose of R12
# Finding the E1 and E2 matrices:
E1 <- solve(R11) %*% R12 %*% solve(R22) %*% R21
E2 <- solve(R22) %*% R21 %*% solve(R11) %*% R12
# print(E1)
# print(E2)
eigen(E1)
eigen(E2)
# The canonical correlations are:
canon.corr <- sqrt(eigen(E1)$values)
canon.corr
canon.corr
dim(canon.corr)
type(canon.corr)
summary(canon.corr)
attached <- search()
attached[!grepl("package", attached)]
attach(mtcar)
attach(mtcars)
attach(breast-cancer)
attach(glass)
attach(weather)
attach(iris)
# We will standardize the variables first
# by dividing by each column's standard deviation:
# (we will remove column 5, the species labels)
iris.std <- sweep(iris[,-5], 2, sqrt(apply(iris[,-5],2,var)), FUN="/")
sepal.meas <- iris.std[,1:2]
petal.meas <- iris.std[,3:4]
### Doing the CCA the long way:
# Finding blocks of the correlation matrix:
R11 <- cor(sepal.meas)
R22 <- cor(petal.meas)
R12 <- c(cor(sepal.meas[,1], petal.meas[,1]), cor(sepal.meas[,1], petal.meas[,2]),
cor(sepal.meas[,2], petal.meas[,1]), cor(sepal.meas[,2], petal.meas[,2]))
R12 <- matrix(R12, ncol=ncol(R22), byrow=T) # R12 has q2 columns, same as number of petal measurements
R21 <- t(R12)  # R21=transpose of R12
# Finding the E1 and E2 matrices:
E1 <- solve(R11) %*% R12 %*% solve(R22) %*% R21
E2 <- solve(R22) %*% R21 %*% solve(R11) %*% R12
# print(E1)
# print(E2)
eigen(E1)
eigen(E2)
# The canonical correlations are:
canon.corr <- sqrt(eigen(E1)$values)
canon.corr
eigen(E1)
eigen(E1)$values
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R",lib="c:/r-with")
?source
source("http://bioconductor.org/biocLite.R",lib="c:/r-with")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
quit()
install.packages("slidify")
install.packages("devtools")
install.packages("devtool",lib="/data/Rpackages")
install.packages("devtools",lib="/data/Rpackages")
library(devtools)
savehistory()
quit()
quit()
library(plyr)
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("rpart",lib="c:\R")
install.packages("rpart",lib="c:/R")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(rpart)
quit
quit()
quit
quit()
library(ggplot2)
?read.table
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”)
install.packages("Rmysql",type="source")
install.packages("RMYSQL",type="source")
install.packages("RMySQL",type="source")
library(RMySQL)
library(RMYSQL)
install.packages("RMySQL",type="source")
library(RMYSQL)
library(RMySQL)
library(devtools)
find_tools()
shortPathName("C:\\Program Files\\MySQL\\MySQL Server 5.6")
install.packages("RMySQL",type="source")
find_rtools()
quit()
install.packages('RMySQL',type='source')
restart()
install.packages('RMySQL',type='source')
quit()
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages("RMySQL",type="source")
install.packages("RMySQL",type="source")
install.packages("RMySQL",type="source")
install.packages("RMySQL",type="source")
library(RMySQL)
quit()
library(devtools)
find_rtools()
install.packages("RMySQL",type="source")
install.packages("MySQL",type="source")
install.packages("RMySQL",type="source")
install.packages("RMySQL",type="source")
install.packages("RMySQL",type="source")
install.packages("IRanges")
source("http://bioconductor.org/biocLite.R")
biocLite("IRange")
biocLite("Biobase")
biocLite("GEOquery")
library(devtools)
quit()
library(BioBase)
library(Biobase)
library(dagdata)
source("http:\\bioconductor.org")
source("http://bioconductor.org/biocLite.R")
biocLite("dagdata")
library(dagdata)
library(dagdata)
library(Biobase)
library(dagdata)
install.packages("dagdata")
source("http://bioconductor.org/biocLite.R")
biocLite("dagdata")
library(limma)
phenoData <- data.frame(treatment=factor(rep(c("control","drug"),each=4)),
sex=factor(rep(rep(c("female","male"),each=2),2)))
library(devtools)
install_github('dagdata','genomicsclass')
install_github("rafalib","ririzarr")
library(rafalib)
source("http://bioconductor.org/biocLite.R")
biocLite("genefilter")
library(preprocess)
library(preprocessCore)
library(SpikeIn)
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R"
)
source("http://bioconductor.org/biocLite.R")
biocLite("SpikeIn")
quit()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
library(datasets)
data(iris)
>iris
?iris
summary(iris)
mean(Sepal.Length)
mean(iris$Sepal.Length)
apply(iris[, 1:4], 1, mean)
iris[.1:4]
class(iris)
str(iris)
apply(iris[, 1:4], 2, mean)
?apply
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
apply(x, 1, mean, trim = .2)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?mtcar
?mtcars
split(mtcars$mpg, mtcars$cyl)
mtcars$mpg
head(mtcars)
split(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
# Assignment2: Caching the Inverse of a Matrix
## creates a wrapper object around a matrix that can optionally store
## its inverse. exposes setters and getters for both. invalidates
## cache on set.
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinv <- function(inv) inverse <<- inv
getinv <- function() inverse
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## computes the inverse of a matrix with caching.
## expects a wrapped matrix as returned from makeCacheMatrix. first
## checks cache in the object passed in for the presence of the result
## of a previous run. if found returns that, otherwise computes the
## result and then stores it in the cache as well as returning it to
## the caller
cacheSolve <- function(x) {
inverse <- x$getinv()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data)
x$setinv(inverse)
inverse
}
setwd("c:/person/reproducibility")
setwd("c:/person/reproducibility/RepData_PeerAssessment1")
